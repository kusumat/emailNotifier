# Customise this file, documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/fastlane/docs
# All available actions: https://docs.fastlane.tools/actions
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# If you want to automatically update fastlane if a new version is available:
update_fastlane

skip_docs

default_platform :ios

platform :ios do
  before_all do
    # ENV["SLACK_URL"] = "https://hooks.slack.com/services/..."
    ENV['MATCH_KEYCHAIN_NAME'] = "konyappfactorydev"
    ENV['MATCH_KEYCHAIN_PASSWORD'] = "PassW0rd!"
    begin
      keychain_count = `security list-keychains -d user | wc -l`.strip.split(' ')[0].to_i
      if keychain_count > 1
        begin
          delete_keychain(name: ENV["MATCH_KEYCHAIN_NAME"])
          $keychain_count -= 1
        end while keychain_count == 1
      end
    rescue => ex
    end
    create_keychain(name: ENV["MATCH_KEYCHAIN_NAME"], password: ENV["MATCH_KEYCHAIN_PASSWORD"], unlock: true)
    automatic_code_signing(path: ENV["FL_PROJECT_SIGNING_PROJECT_PATH"])
    update_info_plist(xcodeproj: ENV["FL_PROJECT_SIGNING_PROJECT_PATH"], plist_path: 'Info.plist')
    match
    ENV['GYM_XCARGS'] = "DEVELOPMENT_TEAM=#{ENV["sigh_#{ENV['MATCH_APP_IDENTIFIER']}_#{ENV['MATCH_TYPE']}_team-id"]} PROVISIONING_PROFILE_SPECIFIER=#{ENV["sigh_#{ENV['MATCH_APP_IDENTIFIER']}_#{ENV['MATCH_TYPE']}"]}"
  end

  desc "Wildcard build and sign (Release)"
  lane :wildcard_build_release do
    gym(scheme: 'KRelease', clean:true, disable_xcpretty: true)
  end

  desc "Wildcard build and sign (Debug)"
  lane :wildcard_build_debug do
    gym(scheme: 'KDebug', clean:true, disable_xcpretty: true)
  end

  # You can define as many lanes as you want

  after_all do |lane|
    # This block is called, only if the executed lane was successful
    delete_keychain(name: ENV["MATCH_KEYCHAIN_NAME"])
    # slack(
    #   message: "Successfully deployed new App Update."
    # )
  end

  error do |lane, exception|
    # slack(
    #   message: exception.message,
    #   success: false
    # )
  end
end


# More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Platforms.md
